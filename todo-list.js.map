{"version":3,"file":"todo-list.js","sourceRoot":"","sources":["src/todo-list.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAGrD,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QAEH,oBAAe,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAe5C;;WAEG;QAEH,WAAM,GAAG,YAAY,CAAC;IA8C1B,CAAC;IA5CY,MAAM;QACX,OAAO,IAAI,CAAA;cACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;yBACf,IAAI,CAAC,aAAa;;;;cAI7B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,KAAK,mBAAmB,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,qCAAqC,CAAC;;;yBAGtI,IAAI,CAAC,WAAW;;;SAGhC,CAAA;IACL,CAAC;IAED,aAAa;QACT,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,OAAO,CAAC,IAAW;QAEf,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,aAAa,EAAE,CAAC;IAEzB,CAAC;IAEO,WAAW;IAEnB,CAAC;IAED,UAAU,CAAC,KAAY;QACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACtC,IAAI,CAAC,aAAa,EAAE,CAAC;IAEzB,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,MAAc;QACnB,OAAO,GAAG,MAAM,EAAE,CAAC;IACvB,CAAC;;AA7De,eAAM,GAAG,GAAG,CAAA;;;;;;;;;;;GAW7B,AAXuB,CAWtB;AAMA;IADC,QAAQ,EAAE;wCACW;AArBb,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CAmEpB","sourcesContent":["import { LitElement, html, css } from \"lit\";\r\nimport { customElement, property } from \"lit/decorators.js\";\r\n\r\n@customElement('todo-list')\r\nexport class TodoList extends LitElement {\r\n\r\n    todoListDefault = [\"Hola\", \"Adios\", \"Jaja\"];\r\n\r\n    static override styles = css`\r\n    :host {\r\n      display: block;\r\n      padding: 16px;\r\n      margin: 0 auto;\r\n      width: 900px;\r\n    }\r\n\r\n    ul > li {\r\n      padding: 5px;\r\n    }\r\n  `;\r\n\r\n    /**\r\n     * El titulo a poner en la lista por default\r\n     */\r\n    @property()\r\n    titulo = 'TO-DO List';\r\n    \r\n    override render() {\r\n        return html`\r\n        <h1>${this.putTitle(this.titulo)}</h1>\r\n        <button @click=${this.onClickCreate} part=\"button\">\r\n            CREATE\r\n        </button>\r\n        <ul>\r\n            ${this.todoListDefault.map((value, index) => html `<li>${value} <button @click=${() => this.removeTask(index)} part=\"button\">Remove</button></li>`)}\r\n        </ul>\r\n        <br>\r\n        <button @click=${this._modifyTask} part=\"button\">\r\n            Click here to modify a Task\r\n        </button>\r\n        `\r\n    }\r\n\r\n    onClickCreate() {\r\n        this.dispatchEvent(new CustomEvent('create'));\r\n    }\r\n\r\n    addTask(task:string) {\r\n    \r\n        this.todoListDefault.push(task);\r\n        this.requestUpdate();\r\n\r\n    }\r\n\r\n    private _modifyTask() {\r\n\r\n    }\r\n\r\n    removeTask(index:number) {\r\n        this.todoListDefault.splice(index, 1);\r\n        this.requestUpdate();\r\n\r\n    }\r\n\r\n    /**\r\n     * @param titulo El titulo de la TO-DO List\r\n     */\r\n    putTitle(titulo: string): string {\r\n        return `${titulo}`;\r\n    }\r\n\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n      'todo-list': TodoList;\r\n    }\r\n}"]}